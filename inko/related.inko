import post.(json_to_posts,related_to_json,RelatedPost)
import io.(print,read_file,write_file)
import std.time.(Instant)
import std.json.Json

let TOPN = 5

class async Main {
  fn async main {
    let json_string = read_file('../posts.json').unwrap

    let posts = json_to_posts(json_string)

    let start = Instant.new

    let post_count = posts.size

    let mut tag_map: Map[String, Array[Int]] = Map.with_capacity(128)

    let mut idx = 0
    while idx < post_count{

      let tags = posts.get(idx).tags
      
      tags.size.times fn (i){

        let t = tags.get(i)

        match tag_map.opt_mut(t) {
          
          case Some(v) -> v.push(idx)
          
          case _ -> tag_map.set(t, [idx])
          
        }
      }

      idx += 1
    }

    let all_related : Array[RelatedPost] = Array.with_capacity(post_count)

    
    # print("tagmap: {start.elapsed.to_millis} ms")

    let mut i = 0
    while i < post_count{


    let tagged_post_count = Array.filled(with: 0, times: post_count)
      # post_count.times fn(i) { tagged_post_count.set(i,0) }

      let post = posts.get(i)


      let mut pt = 0
      while pt < post.tags.size{
        
        let indexes = tag_map.get(post.tags.get(pt))

        let mut it = 0
        while it < indexes.size{

            tagged_post_count.set(i, tagged_post_count.get(i) + 1)

          it += 1
        }

        pt += 1

      }

      tagged_post_count.set(i,0)

      let mut top_idx = Array.filled(0,TOPN * 2) 
      let mut min_tags = 0

      let mut idx = 0
      while idx < post_count{

        let count = tagged_post_count.get(idx)

        if count > min_tags {

          let mut upper_bound = ( TOPN - 2 ) * 2

          while upper_bound >= 0 and count > top_idx.get(upper_bound) {
            top_idx.set(upper_bound+2, top_idx.get(upper_bound))
            top_idx.set(upper_bound+3, top_idx.get(upper_bound+1))
            upper_bound -= 2
          }

          let insert_pos = upper_bound + 2
          top_idx.set(insert_pos, count)
          top_idx.set(insert_pos+1, idx)

          min_tags = top_idx.get(TOPN * 2 - 2 )

        }

        idx += 1

      }

      let top_posts = Array.with_capacity(TOPN)

      TOPN.times fn (j){
        let index = top_idx.get(j*2+1)
        top_posts.push(posts.get(index))
      }

      all_related.push(RelatedPost{
        @id = post.id, 
        @tags = post.tags, 
        @related = top_posts
    })

      i += 1
    }

    let took = start.elapsed.to_millis
    print("Processing time (w/o IO): {took} ms")

    let json = related_to_json(all_related)

    write_file('../related_posts_inko.json', json).unwrap

  }
}

